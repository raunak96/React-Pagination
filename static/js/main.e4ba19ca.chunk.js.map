{"version":3,"sources":["components/Posts.jsx","components/Pagination.jsx","App.js","serviceWorker.js","index.js"],"names":["Posts","posts","isLoading","className","map","post","key","id","title","Pagination","postsPerPage","totalPosts","handleClick","currentPage","Pages","i","Math","ceil","push","class","page","href","onClick","App","useState","setPosts","setisLoading","setCurrentPage","useEffect","a","axios","get","response","data","console","log","fetchPosts","getPostLastIndex","getPostFirstIndex","slice","length","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"sQAsBeA,EApBD,SAAC,GAAuB,IAAtBC,EAAqB,EAArBA,MAAMC,EAAe,EAAfA,UAClB,OACI,oCAEQA,EAAY,0CACR,wBAAIC,UAAU,mBAENF,EAAMG,KAAI,SAAAC,GAAI,OACV,wBAAIC,IAAKD,EAAKE,GAAIJ,UAAU,mBACvBE,EAAKG,aCU3BC,EAnBI,SAAC,GAEhB,IAFuE,IAAtDC,EAAqD,EAArDA,aAAaC,EAAwC,EAAxCA,WAAWC,EAA6B,EAA7BA,YAAYC,EAAiB,EAAjBA,YAC/CC,EAAM,GACJC,EAAE,EAAEA,GAAGC,KAAKC,KAAKN,EAAWD,GAAcK,IAC9CD,EAAMI,KAAKH,GACf,OACI,6BACI,wBAAII,MAAM,qCAEFL,EAAMV,KAAI,SAAAgB,GAAI,OACV,wBAAId,IAAKc,EAAMjB,UAAS,UAAKiB,IAASP,EAAY,SAAS,GAAnC,eACpB,uBAAGQ,KAAK,KAAKlB,UAAU,YAAYmB,QAAS,kBAAIV,EAAYQ,KAAQA,UC2BjFG,EAhCH,WAAO,IAAD,EACYC,mBAAS,IADrB,mBACPvB,EADO,KACAwB,EADA,OAEoBD,oBAAS,GAF7B,mBAEPtB,EAFO,KAEIwB,EAFJ,OAGwBF,mBAAS,GAHjC,mBAGPX,EAHO,KAGMc,EAHN,OAISH,mBAAS,IAAzBd,EAJO,oBAMdkB,qBAAU,YACU,uCAAG,4BAAAC,EAAA,sEAEXH,GAAa,GAFF,SAGUI,IAAMC,IAAN,8CAHV,OAGPC,EAHO,OAIXP,EAASO,EAASC,MAClBP,GAAa,GALF,gDAOXQ,QAAQC,IAAI,KAAMH,SAASC,MAPhB,yDAAH,qDAUhBG,KACD,IAEH,IAAMC,EAAmBxB,EAAYH,EAC/B4B,EAAmBD,EAAiB3B,EAE1C,OACI,yBAAKP,UAAU,kBACX,wBAAIA,UAAU,iCAAd,YACA,kBAAC,EAAD,CAAOD,UAAWA,EAAWD,MAAOA,EAAMsC,MAAMD,EAAkBD,KAClE,kBAAC,EAAD,CAAY3B,aAAcA,EAAcC,WAAYV,EAAMuC,OAAQ3B,YAAaA,EAAaD,YAAa,SAACQ,GAAD,OAAQO,EAAeP,QCtBxHqB,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SD0HpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLxB,QAAQwB,MAAMA,EAAMC,c","file":"static/js/main.e4ba19ca.chunk.js","sourcesContent":["import React from 'react';\n\nconst Posts = ({posts,isLoading}) => {\n    return (\n        <>\n            {\n                isLoading? (<h2>Loading...</h2>):(\n                    <ul className=\"list-group mb-4\">\n                        {\n                            posts.map(post=>(\n                                <li key={post.id} className=\"list-group-item\">\n                                    {post.title}\n                                </li>\n                            ))\n                        }\n                    </ul>\n                )\n            }\n        </>\n    );\n};\n\nexport default Posts;","import React from 'react';\n\nconst Pagination = ({postsPerPage,totalPosts,handleClick,currentPage}) => {\n    const Pages=[];\n    for(var i=1;i<=Math.ceil(totalPosts/postsPerPage);i++)\n        Pages.push(i);\n    return (\n        <nav>\n            <ul class=\"pagination justify-content-center\">\n                {\n                    Pages.map(page=>(\n                        <li key={page} className={`${page === currentPage?'active':''} page-item`}>\n                            <a href=\"!#\" className=\"page-link\" onClick={()=>handleClick(page)}>{page}</a>\n                        </li>\n                    ))\n                }\n            </ul>\n        </nav>\n    );\n};\n\nexport default Pagination;","import React, { useState } from \"react\";\nimport \"./App.css\";\nimport { useEffect } from \"react\";\nimport axios from \"axios\";\nimport Posts from \"./components/Posts\";\nimport Pagination from \"./components/Pagination\";\n\nconst App = () => {\n    const [posts, setPosts] = useState([]);\n    const [isLoading, setisLoading] = useState(false);\n    const [currentPage, setCurrentPage] = useState(1);\n    const [postsPerPage] = useState(10);\n\n    useEffect(() => {\n        const fetchPosts = async () => {\n            try {\n                setisLoading(true);\n                let response = await axios.get(`https://jsonplaceholder.typicode.com/posts`);\n                setPosts(response.data);\n                setisLoading(false);\n            } catch (error) {\n                console.log(error.response.data);\n            }\n        };\n        fetchPosts();\n    }, []);\n\n    const getPostLastIndex = currentPage*postsPerPage;\n    const getPostFirstIndex= getPostLastIndex-postsPerPage;\n\n    return (\n        <div className=\"container mt-5\">\n            <h1 className=\"text-primary text-center mb-3\">My Posts</h1>\n            <Posts isLoading={isLoading} posts={posts.slice(getPostFirstIndex,getPostLastIndex)} />\n            <Pagination postsPerPage={postsPerPage} totalPosts={posts.length} currentPage={currentPage} handleClick={(page)=>setCurrentPage(page)}/>\n        </div>\n    );\n};\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}